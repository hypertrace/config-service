syntax = "proto3";

package org.hypertrace.label.application.rule.config.service.v1;

option java_multiple_files = true;

message LabelApplicationRule {
  string id = 1;
  LabelApplicationRuleData data = 2;
}

message LabelApplicationRuleData {
  string name = 1;
  Condition matching_condition = 2;
  Action label_action = 3;
  bool enabled = 4;
  optional string description = 5;

  message Condition {
    oneof condition {
      LeafCondition leaf_condition = 1;
      CompositeCondition composite_condition = 2;
    }
  }

  message CompositeCondition {
    LogicalOperator operator = 1;
    repeated Condition children = 2;

    enum LogicalOperator {
      LOGICAL_OPERATOR_UNSPECIFIED = 0;
      LOGICAL_OPERATOR_AND = 1;
      LOGICAL_OPERATOR_OR = 2;
    }
  }

  message LeafCondition {
    // only equals and regex are supported for key condition
    StringKeyCondition key_condition = 1;
    oneof condition {
      StringValueCondition string_condition = 2;
      UnaryCondition unary_condition = 3;
      JsonCondition json_condition = 4;
    }
  }

  message StringKeyCondition {
    Operator operator = 1;
    oneof kind {
      string value = 2;
    }

    enum Operator {
      OPERATOR_UNSPECIFIED = 0;
      OPERATOR_EQUALS = 1; // operator to check if the key exists, and value is equal to the provided value
      OPERATOR_MATCHES_REGEX = 2; // operator to check if the key exists, and value matches the provided regex value
    }
  }

  message StringValueCondition {
    Operator operator = 1;
    oneof kind {
      string value = 2;
      StringList values = 3;
    }

    message StringList {
      repeated string values = 1;
    }

    enum Operator {
      OPERATOR_UNSPECIFIED = 0;
      OPERATOR_EQUALS = 1; // operator to check if the key exists, and value is equal to the provided value
      OPERATOR_MATCHES_REGEX = 2; // operator to check if the key exists, and value matches the provided regex value
      OPERATOR_MATCHES_IPS = 3; // operator to check if the key exists, and IP value matches provided IP(s), CIDR(s)
      OPERATOR_NOT_MATCHES_IPS = 4; // operator to check if the key exists, and IP doesn't match provided IP(s), CIDR(s)
      OPERATOR_NOT_EQUALS = 5; // operator to check if the key exists, and value is not equal to the provided value
      OPERATOR_NOT_MATCHES_REGEX = 6; // operator to check if the key exists, and value not matches the provided regex value
    }
  }

  message UnaryCondition {
    Operator operator = 1;

    enum Operator {
      OPERATOR_UNSPECIFIED = 0;
      OPERATOR_EXISTS = 1; // checks for existence of the key
      OPERATOR_NOT_EXISTS = 2; // checks for non-existence of the key
    }
  }

  message JsonCondition {
    string json_path = 1; // path to json structure
    oneof value_condition {
      StringValueCondition string_condition = 2;
      UnaryCondition unary_condition = 3;
    }
  }

  message Action {
    repeated string entity_types = 1; // captures the entity type - "API", "Service", "Backend"
    Operation operation = 2;
    oneof value {
      StaticLabels static_labels = 3;
      string dynamic_label_key = 4;
      DynamicLabel dynamic_label_expression = 5;
    }

    enum Operation {
      OPERATION_UNSPECIFIED = 0;
      OPERATION_MERGE = 1;
    }

    message StaticLabels {
      repeated string ids = 1;
    }

    message DynamicLabel {
      string label_expression = 1; // expression to combine tokens to generate label, example "${deployment}_${version}"
      repeated TokenExtractionRule token_extraction_rules = 2;

      message TokenExtractionRule {
        string key = 1;
        optional string json_path = 2;
        optional string alias = 3;
      }
    }
  }
}
