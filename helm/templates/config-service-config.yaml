apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.configServiceConfig.name }}
  labels:
    release: {{ .Release.Name }}
data:
  application.conf: |-
    service.port = {{ .Values.containerPort }}
    service.admin.port = {{ .Values.containerAdminPort }}

    generic.config.service {
      document.store {
        {{- if .Values.database }}
        {{- $dst := .Values.database.type }}
        dataStoreType = {{ $dst }}
        appName = {{ .Values.configServiceConfig.name }}

        {{- range $key, $value := (index .Values "database") }}
        {{- if ne $key $dst }}
        {{ $key }} = {{- toJson $value }}
        {{- end }}
        {{- end }}
    
        {{ $dst }} {
          {{- range $key, $value := (index .Values "database" (printf "%s" $dst)) }}
          {{- if $value }}
            {{- if hasPrefix "${?" (printf "%s" $value) }}
          {{ $key }} = {{ $value }}
            {{- else }}
          {{ $key }} = {{- toJson $value }}
            {{- end }}
          {{- end }}
          {{- end }}
        }
        {{- end }}
      }
      publish.change.events = {{ .Values.configServiceConfig.publishChangeEvents }}
    }
    event.store {
      type = kafka
      bootstrap.servers = "bootstrap:9092"
      config.change.events.producer {
        bootstrap.servers = "bootstrap:9092"
        schema.registry.url = "http://schema-registry-service:8081"
      }
    }
    partitioner.config.service {
      {{- if $.Values.partitionerServiceConfig.defaultProfiles }}
      default.profiles = [
      {{- range $k,$v := $.Values.partitionerServiceConfig.defaultProfiles }}
        {
          name = {{ $v.name }}
          partition.key = {{ $v.partitionKey }}
        }
      {{- end }}
      {{- end }}
      ]
    }

