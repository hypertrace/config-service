syntax = "proto3";

package org.hypertrace.span.processing.config.service.v1;

option java_multiple_files = true;

import "google/protobuf/timestamp.proto";

service SpanProcessingConfigService {
  rpc CreateExcludeSpanRule(CreateExcludeSpanRuleRequest) returns (CreateExcludeSpanRuleResponse) {}

  rpc UpdateExcludeSpanRule(UpdateExcludeSpanRuleRequest) returns (UpdateExcludeSpanRuleResponse) {}

  rpc GetAllExcludeSpanRules(GetAllExcludeSpanRulesRequest) returns (GetAllExcludeSpanRulesResponse) {}

  rpc DeleteExcludeSpanRule(DeleteExcludeSpanRuleRequest) returns (DeleteExcludeSpanRuleResponse) {}
}

message CreateExcludeSpanRuleRequest {
  ExcludeSpanRuleInfo rule_info = 1;
}

message CreateExcludeSpanRuleResponse {
  ExcludeSpanRuleDetails rule_details = 1;
}

message GetAllExcludeSpanRulesRequest {}

message GetAllExcludeSpanRulesResponse {
  repeated ExcludeSpanRuleDetails rule_details = 1;
}

message UpdateExcludeSpanRuleRequest {
  UpdateExcludeSpanRule rule = 1;
}

message UpdateExcludeSpanRuleResponse {
  ExcludeSpanRuleDetails rule_details = 1;
}

message DeleteExcludeSpanRuleRequest {
  string id = 1;
}

message DeleteExcludeSpanRuleResponse {}

message ExcludeSpanRule {
  string id = 1;
  ExcludeSpanRuleInfo rule_info = 2;
}

message ExcludeSpanRuleDetails {
  ExcludeSpanRule rule = 1;
  ExcludeSpanRuleMetadata metadata = 2;
}

message ExcludeSpanRuleInfo {
  string name = 1;
  SpanFilter filter = 2;
  bool disabled = 3;
}

message ExcludeSpanRuleMetadata {
  google.protobuf.Timestamp creation_timestamp = 1;
  google.protobuf.Timestamp last_updated_timestamp = 2;
}

message UpdateExcludeSpanRule {
  string id = 1;
  string name = 2;
  SpanFilter filter = 3;
  bool disabled = 4;
}

message SpanFilter {
  oneof span_filter_expression {
    LogicalSpanFilterExpression logical_span_filter = 1;
    RelationalSpanFilterExpression relational_span_filter = 2;
  }
}

message LogicalSpanFilterExpression {
  LogicalOperator operator = 1;
  repeated SpanFilter operands = 2;
}

message RelationalSpanFilterExpression {
  oneof left_operand {
    string span_attribute_key = 1;
    Field field = 2;
  }
  RelationalOperator operator = 3;
  SpanFilterValue right_operand = 4;
}

message SpanFilterValue {
  oneof value {
    string string_value = 1;
  }
}

enum LogicalOperator {
  LOGICAL_OPERATOR_UNSPECIFIED = 0;
  LOGICAL_OPERATOR_AND = 1;
  LOGICAL_OPERATOR_OR = 2;
}

enum Field {
  FIELD_UNSPECIFIED = 0;
  FIELD_URL = 1;
  FIELD_SERVICE_NAME = 2;
  FIELD_ENVIRONMENT_NAME = 3;
}

enum RelationalOperator {
  RELATIONAL_OPERATOR_UNSPECIFIED = 0;
  RELATIONAL_OPERATOR_EQUALS = 1;
  RELATIONAL_OPERATOR_NOT_EQUALS = 2;
  RELATIONAL_OPERATOR_CONTAINS = 3;
  RELATIONAL_OPERATOR_STARTS_WITH = 4;
  RELATIONAL_OPERATOR_ENDS_WITH = 5;
  RELATIONAL_OPERATOR_REGEX_MATCH = 6;
}
